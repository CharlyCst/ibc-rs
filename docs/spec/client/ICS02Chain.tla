--------------------------- MODULE ICS02Chain ---------------------------

EXTENDS Integers, FiniteSets, ClientHandlers, ICS02Definitions
        
CONSTANTS MaxHeight, \* maximal chain height
          ChainID \* chain identifier  

VARIABLES chainStore, \* chain store, containing client heights, a connection end, a channel end 
          incomingDatagrams \* set of incoming datagrams

vars == <<chainStore, incomingDatagrams>>
Heights == 1..MaxHeight \* set of possible heights of the chains in the system          

(***************************************************************************
 Client update operators
 ***************************************************************************)
\* Update the clients on chain with chainID, 
\* using the client datagrams generated by the relayer      
\* (Handler operators defined in ClientHandlers.tla)
LightClientUpdate(chainID, store, datagrams) == 
    \* create clients
    LET clientCreatedStore == HandleCreateClient(chainID, store, datagrams) IN
    \* update clients
    LET clientUpdatedStore == HandleClientUpdate(chainID, clientCreatedStore, datagrams) IN

    clientUpdatedStore

(***************************************************************************
 Chain actions
 ***************************************************************************)       
\* Advance the height of the chain until MaxHeight is reached
AdvanceChain ==
    /\ chainStore.height + 1 \in Heights
    /\ chainStore' = [chainStore EXCEPT !.height = chainStore.height + 1]
    /\ UNCHANGED incomingDatagrams

\* Handle the datagrams and update the chain state        
HandleIncomingDatagrams ==
    /\ incomingDatagrams /= AsSetDatagrams({})
    /\ chainStore' = LightClientUpdate(ChainID, chainStore, incomingDatagrams) 
    /\ incomingDatagrams' = AsSetDatagrams({})
       

(***************************************************************************
 Specification
 ***************************************************************************)
\* Initial state predicate
\* Initially
\*  - each chain is initialized to InitChain (defined in RelayerDefinitions.tla)
\*  - pendingDatagrams for each chain is empty
\*  - the packetSeq is set to 1
Init == 
    /\ chainStore = ICS02InitChainStore
    /\ incomingDatagrams = AsSetDatagrams({})
    
\* Next state action
\* The chain either
\*  - advances its height
\*  - receives datagrams and updates its state
\*  - sends a packet if the appPacketSeq is not bigger than MaxPacketSeq
\*  - acknowledges a packet
Next ==
    \/ AdvanceChain 
    \/ HandleIncomingDatagrams
    \/ UNCHANGED vars
        
Fairness ==
    /\ WF_vars(AdvanceChain)
    /\ WF_vars(HandleIncomingDatagrams)        
        
(***************************************************************************
 Invariants
 ***************************************************************************)
\* Type invariant   
\* ChainStores and Datagrams are defined in RelayerDefinitions.tla        
TypeOK ==    
    /\ chainStore \in ChainStores(MaxHeight)
    /\ incomingDatagrams \in SUBSET Datagrams(MaxHeight)
    
(***************************************************************************
 Properties
 ***************************************************************************)    
\* it ALWAYS holds that the height of the chain does not EVENTUALLY decrease
HeightDoesntDecrease ==
    [](\A h \in Heights : chainStore.height = h 
        => <>(chainStore.height >= h))

=============================================================================
\* Modification History
\* Last modified Wed Oct 07 11:26:25 CEST 2020 by ilinastoilkovska
\* Created Fri Jun 05 16:56:21 CET 2020 by ilinastoilkovska
